// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "employee", "storage"]
}

model Profile {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email           String @unique
    password        String

    firstName       String
    lastName        String

    user            User?
    employee        Employee?

    @@map("profiles")
    @@schema("auth")
}

model User {
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    profile         Profile         @relation(fields: [profileId], references: [id])
    profileId       Int             @unique

    units           Unit[]
    unitsIds        Int[]

    @@map("users")
    @@schema("auth")
}

model Employee {
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    employmentDate  DateTime

    profile         Profile         @relation(fields: [profileId], references: [id])
    profileId       Int             @unique

    managerId       Int?            
    manager         Employee?       @relation("Manages", fields: [managerId], references: [id])
    workers         Employee[]      @relation("Manages")

    @@map("employees")
    @@schema("employee")
}

model Storage {
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    name            String          @unique
    address         String          @unique

    units           Unit[]
    unitsIds        Int[]

    @@map("storages")
    @@schema("storage")
}

model Unit {
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    weightCapacity  Float

    storage         Storage         @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    storageId       Int             

    user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId          Int?            

    items           Item[]
    itemsIds        Int[]

    @@map("units")
    @@schema("storage")
}

model Item {
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    name            String
    weight          Float

    unit            Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    unitId          Int?             

    @@map("items")
    @@schema("storage")
}